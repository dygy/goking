{"version":3,"sources":["wasm.js","App.js","index.js","reportWebVitals.js"],"names":["WebAssembly","instantiateStreaming","resp","importObject","a","arrayBuffer","source","instantiate","path","go","window","Go","Promise","resolve","reject","console","log","fetch","then","result","run","instance","catch","error","loadWasm","wasm","hot","Component","useState","setResp","getStr","className","style","color","fontSize","width","height","position","top","left","display","flexWrap","Object","keys","map","e","margin","Math","random","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","App","ReactDOM","render","StrictMode","document","getElementById","forceClearCache","scripts","getElementsByTagName","torefreshs","i","length","j","src","indexOf","replace","location","reload"],"mappings":"kPAGSA,YAAYC,uBACbD,YAAYC,qBAAZ,uCAAmC,WAAOC,EAAMC,GAAb,eAAAC,EAAA,sEACHF,EADG,8BACGG,cADH,cACzBC,EADyB,gBAElBN,YAAYO,YAAYD,EAAQH,GAFd,mFAAnC,yDAOJ,SAAkBK,GACd,IAAMC,EAAK,IAAIC,OAAOC,GACtB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzBC,QAAQC,IAAIP,GACZT,YAAYC,qBAAqBgB,MAAMT,GAAOC,EAAGN,cAC5Ce,MAAK,SAAAC,GACFV,EAAGW,IAAID,EAAOE,UACdR,EAAQM,EAAOE,aAElBC,OAAM,SAAAC,GACHT,EAAOS,SAMvBC,CAAS,eAAeN,MAAK,SAAAO,GACzBV,QAAQC,IAAIS,MACbH,OAAM,SAAAC,GACLR,QAAQC,IAAI,OAAQO,MCUbG,IClCCC,EDkCDD,iBAlCf,WACI,IACmB,EADnB,EAAwBE,mBAAS,MAAjC,mBAAO1B,EAAP,KAAa2B,EAAb,KAIA,OAHInB,OAAOoB,SACP,UAAApB,OAAOoB,gBAAP,SAAiBZ,KAAKW,IAGtB,sBAAKE,UAAU,MAAf,UACI,mBAAGC,MAAO,CACNC,MAAO,QACPC,SAAU,OACVC,MAAO,QACPC,OAAQ,QACRC,SAAU,WACVC,IAAK,GACLC,KAAM,GACNC,QAAS,OACTC,SAAU,QATd,SAWKC,OAAOC,KAAKjC,QACRkC,KAAI,SAACC,GAAD,OAAO,sBAAcb,MAAO,CAACc,OAAQ,GAA9B,SAAmCD,GAAxBA,QAG/B,wBAAQd,UAAU,aAAlB,SACI,sBAAKA,UAAW,UAAhB,UACK7B,GAAQ,wBAAQ6B,UAAW,MAAnB,SAA2B7B,IACpC,wBAAQ6B,UAAW,MAAnB,SAAyC,GAAdgB,KAAKC,WAChC,wBAAQjB,UAAW,MAAnB,SAAyC,GAAdgB,KAAKC,WAChC,wBAAQjB,UAAW,MAAnB,SAAyC,GAAdgB,KAAKC,sBErBrCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,ODDEvB,EAcT8B,EAbHC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAACjC,EAAD,MAEJkC,SAASC,eAAe,SAahCb,IACAvC,OAAOqD,gBAAkB,WAIrB,IAHA,IAAMC,EAAUH,SAASI,qBAAqB,UACxCC,EAAa,CAAC,cAAe,gBAE3BC,EAAI,EAAGA,EAAIH,EAAQI,OAAQD,IAC/B,IAAI,IAAIE,EAAI,EAAGA,EAAIH,EAAWE,OAAQC,IAC/BL,EAAQG,GAAGG,KAAQN,EAAQG,GAAGG,IAAIC,QAAQL,EAAWG,KAAO,IAC3DL,EAAQG,GAAGG,IAAMN,EAAQG,GAAGG,IAAIE,QAAQN,EAAWG,GAAlC,UAAyCH,EAAWG,GAApD,aAJjB,KAQZ3D,OAAO+D,SAASC,QAAO,M","file":"static/js/main.808f503c.chunk.js","sourcesContent":["\r\nexport default () => {\r\n// This is a polyfill for FireFox and Safari\r\n    if (!WebAssembly.instantiateStreaming) {\r\n        WebAssembly.instantiateStreaming = async (resp, importObject) => {\r\n            const source = await (await resp).arrayBuffer()\r\n            return await WebAssembly.instantiate(source, importObject)\r\n        }\r\n    }\r\n\r\n// Promise to load the wasm file\r\n    function loadWasm(path) {\r\n        const go = new window.Go()\r\n        return new Promise((resolve, reject) => {\r\n            console.log(go);\r\n            WebAssembly.instantiateStreaming(fetch(path), go.importObject)\r\n                .then(result => {\r\n                    go.run(result.instance)\r\n                    resolve(result.instance)\r\n                })\r\n                .catch(error => {\r\n                    reject(error)\r\n                })\r\n        })\r\n    }\r\n\r\n// Load the wasm file\r\n    loadWasm(\"./main.wasm\").then(wasm => {\r\n        console.log(wasm)\r\n    }).catch(error => {\r\n        console.log(\"ouch\", error)\r\n    })\r\n}\r\n","import './App.css';\r\nimport { hot } from 'react-hot-loader/root';\r\nimport {useState} from \"react\";\r\nimport wasm from \"./wasm\";\r\n\r\nwasm();\r\nfunction App() {\r\n    const [resp, setResp] = useState(null)\r\n    if (window.getStr) {\r\n        window.getStr()?.then(setResp)\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <p style={{\r\n                color: 'white',\r\n                fontSize: '11px',\r\n                width: '100vw',\r\n                height: '300px',\r\n                position: 'absolute',\r\n                top: 15,\r\n                left: 15,\r\n                display: 'flex',\r\n                flexWrap: 'wrap',\r\n            }}>\r\n                {Object.keys(window)\r\n                    .map((e) => <span key={e} style={{margin: 3}}>{e}</span>)\r\n                }\r\n            </p>\r\n            <header className=\"App-header\">\r\n                <div className={'btn-row'}>\r\n                    {resp && <button className={'btn'}>{resp}</button>}\r\n                    <button className={'btn'}>{Math.random()*10}</button>\r\n                    <button className={'btn'}>{Math.random()*10}</button>\r\n                    <button className={'btn'}>{Math.random()*10}</button>\r\n                </div>\r\n            </header>\r\n        </div>\r\n  );\r\n}\r\n\r\nexport default hot(App);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst render = (Component) => {\n    ReactDOM.render(\n        <React.StrictMode>\n            <Component />\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n}\nif (module.hot) {\n    module.hot.accept('./App.js', () => {\n        console.log('Accepting the updated printMe module!');\n        render(App);\n    })\n}\nrender(App)\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nwindow.forceClearCache = () => {\n    const scripts = document.getElementsByTagName('script');\n    const torefreshs = ['myscript.js', 'myscript2.js']; // list of js to be refresh\n    const key = 1; // change this key every time you want force a refresh\n    for(let i = 0; i < scripts.length; i++){\n        for(let j = 0; j < torefreshs.length; j++){\n            if(scripts[i].src && (scripts[i].src.indexOf(torefreshs[j]) > -1)){\n                scripts[i].src = scripts[i].src.replace(torefreshs[j], `${torefreshs[j]}k=${key}`); // change src in order to refresh js\n            }\n        }\n    }\n    window.location.reload(true);\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n"],"sourceRoot":""}