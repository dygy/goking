{"version":3,"sources":["App.js","index.js","reportWebVitals.js"],"names":["hot","Component","useState","resp","setResp","window","getStr","then","className","style","color","fontSize","width","height","position","top","left","display","flexWrap","Object","keys","map","e","margin","Math","random","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","App","ReactDOM","render","StrictMode","document","getElementById","forceClearCache","scripts","getElementsByTagName","torefreshs","i","length","j","src","indexOf","replace","location","reload"],"mappings":"2NAmCeA,IC7BCC,ED6BDD,iBAhCf,WAAgB,IAAD,EACX,EAAwBE,mBAAS,MAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEA,OADA,UAAAC,OAAOC,gBAAP,SAAiBC,KAAKH,GAElB,sBAAKI,UAAU,MAAf,UACI,mBAAGC,MAAO,CACNC,MAAO,QACPC,SAAU,OACVC,MAAO,QACPC,OAAQ,QACRC,SAAU,WACVC,IAAK,GACLC,KAAM,GACNC,QAAS,OACTC,SAAU,QATd,SAWKC,OAAOC,KAAKf,QACRgB,KAAI,SAACC,GAAD,OAAO,sBAAMb,MAAO,CAACc,OAAQ,GAAtB,SAA2BD,SAG/C,wBAAQd,UAAU,aAAlB,SACI,sBAAKA,UAAW,UAAhB,UACKL,GAAQ,wBAAQK,UAAW,MAAnB,SAA2BL,IACpC,wBAAQK,UAAW,MAAnB,SAAyC,GAAdgB,KAAKC,WAChC,wBAAQjB,UAAW,MAAnB,SAAyC,GAAdgB,KAAKC,WAChC,wBAAQjB,UAAW,MAAnB,SAAyC,GAAdgB,KAAKC,sBEhBrCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,ODDE1B,EAcTiC,EAbHC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAACpC,EAAD,MAEJqC,SAASC,eAAe,SAahCb,IACArB,OAAOmC,gBAAkB,WAIrB,IAHA,IAAMC,EAAUH,SAASI,qBAAqB,UACxCC,EAAa,CAAC,cAAe,gBAE3BC,EAAI,EAAGA,EAAIH,EAAQI,OAAQD,IAC/B,IAAI,IAAIE,EAAI,EAAGA,EAAIH,EAAWE,OAAQC,IAC/BL,EAAQG,GAAGG,KAAQN,EAAQG,GAAGG,IAAIC,QAAQL,EAAWG,KAAO,IAC3DL,EAAQG,GAAGG,IAAMN,EAAQG,GAAGG,IAAIE,QAAQN,EAAWG,GAAlC,UAAyCH,EAAWG,GAApD,aAJjB,KAQZzC,OAAO6C,SAASC,QAAO,M","file":"static/js/main.66e2e247.chunk.js","sourcesContent":["import './App.css';\r\nimport { hot } from 'react-hot-loader/root';\r\nimport {useState} from \"react\";\r\nfunction App() {\r\n    const [resp, setResp] = useState(null)\r\n    window.getStr()?.then(setResp)\r\n    return (\r\n        <div className=\"App\">\r\n            <p style={{\r\n                color: 'white',\r\n                fontSize: '11px',\r\n                width: '100vw',\r\n                height: '300px',\r\n                position: 'absolute',\r\n                top: 15,\r\n                left: 15,\r\n                display: 'flex',\r\n                flexWrap: 'wrap',\r\n            }}>\r\n                {Object.keys(window)\r\n                    .map((e) => <span style={{margin: 3}}>{e}</span>)\r\n                }\r\n            </p>\r\n            <header className=\"App-header\">\r\n                <div className={'btn-row'}>\r\n                    {resp && <button className={'btn'}>{resp}</button>}\r\n                    <button className={'btn'}>{Math.random()*10}</button>\r\n                    <button className={'btn'}>{Math.random()*10}</button>\r\n                    <button className={'btn'}>{Math.random()*10}</button>\r\n                </div>\r\n            </header>\r\n        </div>\r\n  );\r\n}\r\n\r\nexport default hot(App);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst render = (Component) => {\n    ReactDOM.render(\n        <React.StrictMode>\n            <Component />\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n}\nif (module.hot) {\n    module.hot.accept('./App.js', () => {\n        console.log('Accepting the updated printMe module!');\n        render(App);\n    })\n}\nrender(App)\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nwindow.forceClearCache = () => {\n    const scripts = document.getElementsByTagName('script');\n    const torefreshs = ['myscript.js', 'myscript2.js']; // list of js to be refresh\n    const key = 1; // change this key every time you want force a refresh\n    for(let i = 0; i < scripts.length; i++){\n        for(let j = 0; j < torefreshs.length; j++){\n            if(scripts[i].src && (scripts[i].src.indexOf(torefreshs[j]) > -1)){\n                scripts[i].src = scripts[i].src.replace(torefreshs[j], `${torefreshs[j]}k=${key}`); // change src in order to refresh js\n            }\n        }\n    }\n    window.location.reload(true);\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n"],"sourceRoot":""}